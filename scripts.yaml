turn_on_max_cleaning:
  sequence:
    - service: system_log.write
      data_template:
        message: >-
            {{ '[SCRIPT] --- turn_ON_max_cleaning ---'}}|
        level: warning
        
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.max_clean
        
    # Playroom
    - service: fan.set_speed
      data:
        entity_id: fan.playroom_xiaomi
        speed: favorite
    
    # Bedroom
    - service: fan.set_speed
      data:
        entity_id: fan.bedroom_xiaomi
        speed: favorite
        
    # Kidsroom
    - service: fan.set_speed
      data:
        entity_id: fan.kidsroom_xiaomi
        speed: favorite    
    
    # Garage
    - service: fan.set_speed
      data:
        entity_id: fan.garage_xiaomi
        speed: favorite
        
    # needed and to just to protect device from too often on/off
    - delay: '00:00:30'
        
    # as setting speed turns on xiaomi fan -> invoke automation to set it correctly
    - service: automation.trigger
      entity_id: automation.playroom_air_quality
    
    # not needed - just to protect device from too often on/off
    - service: automation.trigger
      entity_id: automation.bedroom_aqi_below_20
        
    # not needed - just to protect device from too often on/off
    - service: automation.trigger
      entity_id: automation.kidsroom_aqi_below_20

    # not needed - just to protect device from too often on/off
    - service: automation.trigger
      entity_id: automation.garage_aqi_below_20
        
turn_off_max_cleaning:
  sequence:
    - service: system_log.write
      data_template:
        message: >-
            {{ '[SCRIPT] --- turn_OFF_max_cleaning ---'}}|
        level: warning
        
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.max_clean
  
    - service: fan.set_speed
      data:
        entity_id: fan.playroom_xiaomi
        speed: silent
    
    - service: fan.set_speed
      data:
        entity_id: fan.bedroom_xiaomi
        speed: silent
        
    - service: fan.set_speed
      data:
        entity_id: fan.kidsroom_xiaomi
        speed: silent
        
    - service: fan.set_speed
      data:
        entity_id: fan.garage_xiaomi
        speed: auto
    
    # needed and to just to protect device from too often on/off
    - delay: '00:00:15'
        
    # as setting speed turns on xiaomi fan -> invoke automation to set it correctly
    - service: automation.trigger
      entity_id: automation.playroom_air_quality
    
    - service: automation.trigger
      entity_id: automation.bedroom_aqi_below_20
        
    - service: automation.trigger
      entity_id: automation.kidsroom_aqi_below_20

    - service: automation.trigger
      entity_id: automation.garage_aqi_below_20

sharp_turn_clean_on:
  sequence:
    - service: system_log.write
      data_template:
        message: >-
            {{ '[SCRIPT] --- Sharp Turn Clean ON --- sharp_mode before: ' + states.input_select.sharp_mode.state}}
        level: warning

    - service: ifttt.trigger
      data:
        event: sharp_clean
    
    - service: input_select.select_option
      data:
        entity_id: input_select.sharp_mode
        option: "Clean"

sharp_turn_humidify_on:
  sequence:
    - service: system_log.write
      data_template:
        message: >-
            {{ '[SCRIPT] --- Sharp Turn Humidify ON --- sharp_mode before: ' + states.input_select.sharp_mode.state}}
        level: warning
        
    - service: ifttt.trigger
      data:
        event: sharp_humidify
    
    - service: input_select.select_option
      data:
        entity_id: input_select.sharp_mode
        option: "Humidify"
        
sharp_turn_off:
  sequence:
    - service: system_log.write
      data_template:
        message: >-
            {{ '[SCRIPT] --- Sharp Turn OFF --- sharp_mode before: ' + states.input_select.sharp_mode.state}}
        level: warning
        
    - service: ifttt.trigger
      data:
        event: sharp_off
    
    - service: input_select.select_option
      data:
        entity_id: input_select.sharp_mode
        option: "Off"

change_to_next_sharp_speed_mode:
  sequence:
    # turn sharp on as only then setting speed will take effect
    - service: script.sharp_turn_clean_on
        
    - delay: '00:00:10'
    
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:10'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    
    - delay: '00:00:10'
    
    #Those two below are to set Sharp back to it's proper state
    
    #NOTE: Invoking automation like that seems to not check conditions !
    - service: automation.trigger
      entity_id: automation.living_room_humidity
    
    - delay: '00:00:10'
      
    - service: automation.trigger
      entity_id: automation.living_room_air_quality

# this seems to work
set_sharp_speed_max_and_recreate_state:
  sequence:
    - service: script.set_sharp_speed_max
    
    # without it will execute same time as script above = won't wait until script finishes...
    
    - wait_template: "{{ is_state('input_select.sharp_speed', 'Min') }}"
      timeout: '00:01:00'
    
    #Those two below are to set Sharp back to it's proper state
    
    #NOTE: Invoking automation like that seems to not check conditions !
    - service: automation.trigger
      entity_id: automation.living_room_humidity
    
    - delay: '00:00:10'
      
    - service: automation.trigger
      entity_id: automation.living_room_air_quality

set_sharp_speed_max:
  sequence:
    # turn sharp on as only then setting speed will take effect
    - service: script.sharp_turn_clean_on
        
    - delay: '00:00:05'
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    
    - delay: '00:00:05'

    - condition: or
      conditions:
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Auto"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Pollen"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Med"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Low"
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    
    - delay: '00:00:05'

    - condition: or
      conditions:
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Auto"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Pollen"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Med"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Low"
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    
    - delay: '00:00:05'

    - condition: or
      conditions:
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Auto"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Pollen"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Med"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Low"
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    
    - delay: '00:00:05'

    # this condition should be never true but there is one more chance if any previous step would fail
    - condition: or
      conditions:
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Auto"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Pollen"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Med"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Low"
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
        
set_sharp_speed_min:
  sequence:
    # turn sharp on as only then setting speed will take effect
    - service: script.sharp_turn_clean_on
        
    - delay: '00:00:05'
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    
    - delay: '00:00:05'

    - condition: or
      conditions:
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Auto"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Pollen"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Max"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Med"
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    
    - delay: '00:00:05'

    - condition: or
      conditions:
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Auto"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Pollen"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Max"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Med"
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    
    - delay: '00:00:05'

    - condition: or
      conditions:
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Auto"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Pollen"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Max"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Med"
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    
    - delay: '00:00:05'

    # this condition should be never true but there is one more chance if any previous step would fail
    - condition: or
      conditions:
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Auto"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Pollen"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Max"
        - condition: state
          entity_id: 'input_select.sharp_speed'
          state: "Med"
    
    # change to next mode
    - service: ifttt.trigger
      data:
        event: sharp_speed
    
    - delay: '00:00:05'
    
    - service: input_select.select_next
      data:
        entity_id: input_select.sharp_speed
    