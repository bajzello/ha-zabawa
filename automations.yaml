- alias: "Roborock: save last full cleanup downstairs"
  trigger:
    platform: state
    entity_id: 'vacuum.xiaomi_vacuum_cleaner'
    to: 'docked'
  condition:
    - condition: state
      entity_id: input_boolean.nobody_home
      state: 'on'
  action:
    # This means that it has finished cleaning uninterrupted so save last cleaning timestamp
    - service: input_datetime.set_datetime
      entity_id: input_datetime.last_cleaning
      data_template:
        date: >
            {{ now().timestamp() | timestamp_custom("%Y-%m-%d", true) }}
        time: >
            {{ now().timestamp() | timestamp_custom("%H:%M:%S", true) }}
            

- alias: "Roborock: stop cleaning when someone gets back home"
  trigger:
    platform: state
    entity_id: 'input_boolean.nobody_home'
    from:  'on'
    to: 'off'
  action:
    # set speed to balanced
    # ['Quiet', 'Balanced', 'Turbo', 'Max']
    # 104 = Max
    # 103 = Turbo
    # 102 = Balanced (default)
    # 101 = Silent
    # ---
    # 105 = Gentle
    - service: vacuum.set_fan_speed
      data:
        entity_id: vacuum.xiaomi_vacuum_cleaner
        fan_speed: 102 #Balanced (default)
    
    - service: vacuum.return_to_base
      entity_id: vacuum.xiaomi_vacuum_cleaner
    # running it two times looks like it's needed as first one just stops the vacuum (states: cleaning -(return_to_base)-> paused -(return_to_base)-> returning --> docked  )
    - delay: '00:00:01'
    - service: vacuum.return_to_base
      entity_id: vacuum.xiaomi_vacuum_cleaner
    
- alias: "Roborock: start cleaning when nobody home and it is needed"
  trigger:
    platform: state
    entity_id: 'input_boolean.nobody_home'
    from:  'off'
    to: 'on'
  action:
    - condition: template
      value_template: "{{ (states('sensor.date_time') > (state_attr('input_datetime.last_cleaning', 'timestamp') + states('input_number.min_amount_of_hours_between_vacuuming')|int*60*60) | int | timestamp_custom('%Y-%m-%d, %H:%M', True)) }}"
    - service: vacuum.start
      entity_id: vacuum.xiaomi_vacuum_cleaner
    - delay: '00:00:01'
    - service: vacuum.set_fan_speed
      data:
        entity_id: vacuum.xiaomi_vacuum_cleaner
        fan_speed: 104 #Max
        
- alias: "Roborock: control using magic cube"
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube_158d000289d732
        action_type: tap_twice
  action:
    - service: vacuum.set_fan_speed
      data:
        entity_id: vacuum.xiaomi_vacuum_cleaner
        fan_speed: 102 #Balanced (default)
        
    - service_template: >
        {% if is_state('vacuum.xiaomi_vacuum_cleaner', 'docked') %}
            vacuum.start
        {% elif is_state('vacuum.xiaomi_vacuum_cleaner', 'stopped') or is_state('vacuum.xiaomi_vacuum_cleaner', 'idle') %}
            vacuum.return_to_base
        {% else %}
            vacuum.stop
        {% endif %}
      entity_id: vacuum.xiaomi_vacuum_cleaner
    - delay: '00:00:05'
    - condition: template
      value_template: "{{ is_state('vacuum.xiaomi_vacuum_cleaner', 'stopped') or is_state('vacuum.xiaomi_vacuum_cleaner', 'idle') }}"
    - service: vacuum.return_to_base
      entity_id: vacuum.xiaomi_vacuum_cleaner


# FINISH ONCE THERE IS A SONOFF PLUG ABLE TO RESTART AQUARA GATEWAY AS THE MAIN SOURCE OF GETTING OUT OF SYNC and then restarting it and then HA should solve it
# humidifier xiaomi can also cause issues - check that as well but this one seems to heal itself
- alias: "Restart Aqara and HA when integration interrupted"
  trigger:
    platform: time_pattern
    minutes: "/30"
  condition:
    - condition: or
      conditions:
        - condition: template
          value_template: "{{ not(states.sensor.temperature_158d0002b87fdd.state | float > 0)}}"
  action:
    - service: notify.android_lukasz
      data:
        message: "HA-Zabawa - Aqara Gateway Failure"
        title: "HA-Zabawa" 
    - service: switch.turn_off
      data:
        entity_id: switch.aqara_gateway
    - delay: '00:00:15'
    - service: switch.turn_on
      data:
        entity_id: switch.aqara_gateway
    - delay: '00:01:00'
    - service: homeassistant.restart

- alias: Open gate automatically when Lukasz back home
  trigger:
    - platform: state
      entity_id: 'device_tracker.google_maps_107747480305280073082'
      from:  'not_home'
      to: 'home'
  action:
    - service: cover.open_cover
      data:
        entity_id: cover.gateway

- alias: Wake up on defined datetime
  trigger:
    platform: template
    # remember to update template below by subtracting length of sequence so it will end right on time
    value_template: "{{ (states('sensor.date_time') == (state_attr('input_datetime.wake_up_time', 'timestamp') - 8*60) | int | timestamp_custom('%Y-%m-%d, %H:%M', True)) }}"
  action:
    - service: script.turn_on
      data:
        entity_id: script.wake_up_sequence_9min


# - alias: Speak through Google Cast
#   trigger:
#     platform: time_pattern
#     hours: "/99999"
#   action:
#     service: tts.google_translate_say
#     entity_id: media_player.living_room_display
#     data:
#         message: 'Dzień dobry królewno Alicjo. Pięknie dzisiaj wyglądasz'
#         language: 'pl'
    
# - alias: Test receiving IFTTT event as HA event
#   trigger:
#     - platform: event
#       event_type: ifttt_webhook_received
#       event_data:
#         action: call_service
#   action:
#     service_template: '{{ trigger.event.data.service }}'
#     data_template:
#         entity_id: '{{ trigger.event.data.entity_id }}'
        

- alias: "Entrance external lights on between Setting and Rising"
  trigger:
      # Twilight
    - platform: numeric_state
      entity_id: sun.sun
      value_template: "{{ state.attributes.elevation }}"
      # Can be a positive or negative number
      #below: -4.0
      below: -5.0
      
      # Dawn
    - platform: numeric_state
      entity_id: sun.sun
      value_template: "{{ state.attributes.elevation }}"
      # Can be a positive or negative number
      #above: -4.0
      above: -5.0
  action:
  - service_template: >
        {% if state_attr('sun.sun', 'elevation') | float < -5  %}
            switch.turn_on
        {% else %}
            switch.turn_off
        {% endif %}
    entity_id: switch.sonoff_1000a42461

#do it on boot so sensor will be picked up by generic thermostat as it initializes later than him
- alias: "On boot refresh desired Spa temperature"
  trigger:
    platform: homeassistant
    event: start
  action:
    service: climate.set_temperature
    data_template:
        entity_id: climate.spa
        temperature: '{{ states.climate.spa.attributes.temperature }}'
        
- alias: "Control nobody home using Aqara Magic Cube"
  trigger:
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube_158d000289d732
        action_type: shake_air
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube_158d000289d732
        action_type: flip90
    - platform: event
      event_type: xiaomi_aqara.cube_action
      event_data:
        entity_id: binary_sensor.cube_158d000289d732
        action_type: flip180
  action:
    - service_template: >
        {% if is_state_attr('binary_sensor.cube_158d000289d732', 'last_action', 'shake_air') or is_state_attr('binary_sensor.cube_158d000289d732', 'last_action', 'flip90') %}
            input_boolean.turn_off
        {% elif is_state_attr('binary_sensor.cube_158d000289d732', 'last_action', 'flip180') %}
            input_boolean.turn_on
        {% endif %}
      entity_id: input_boolean.nobody_home

- alias: "Turn on Bathroom Shelves Lights on desired time"
  trigger:
    platform: template
    value_template: "{{ states('sensor.time') == (state_attr('input_datetime.bathroom_lights_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
  action:
    service: switch.turn_on
    data:
        entity_id: switch.sonoff_1000a4af39
        
- alias: "Open and close gate for food delivery"
  trigger:
    platform: template
    value_template: "{{ is_state('input_boolean.nobody_home', 'off') and ((states('sensor.gate_closed') and  now().weekday() >= 1 and now().weekday() <= 5 and states('sensor.time') == (state_attr('input_datetime.open_gate_for_food_delivery_start', 'timestamp') | int | timestamp_custom('%H:%M', False))) or (is_state('sensor.gate_closed', 'False') and  now().weekday() >= 1 and now().weekday() <= 5 and states('sensor.time') == (state_attr('input_datetime.open_gate_for_food_delivery_end', 'timestamp') | int | timestamp_custom('%H:%M', False)))) }}"
  action:
    - service_template: >
        {% if states.sensor.gate_closed.state  %}
            cover.open_cover
        {% else %}
            cover.close_cover
        {% endif %}
      data:
        entity_id: cover.gateway
    

- alias: "Living Room: Air quality"
  trigger:
    - platform: time_pattern
      minutes: "/15"
     # to invoke automation whenever speed was changed as it will always turn Xiaomi on
    - platform: state
      entity_id: sensor.xiaomi_pro_mode
  action:
    # small delay to make sure that device turned on my changing the speed will become ready to get a new order from this automation and HA has up2date state
    - delay: '00:00:30'
    - service_template: >
        {% if states.sensor.xiaomi_pro_aqi.state | float > states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.livingroom_xiaomi', 'off') %}
            fan.turn_on
        {% elif states.sensor.xiaomi_pro_aqi.state | float < states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.livingroom_xiaomi', 'on') %}
            fan.turn_off
        {% else %}
            fan.xiaomi_miio_set_child_lock_on
        {% endif %}
      entity_id: 'fan.livingroom_xiaomi'

- alias: "Garage: Air quality"
  trigger:
    - platform: time_pattern
      minutes: "/15"
      # to invoke automation whenever speed was changed as it will always turn Xiaomi on
    - platform: state
      entity_id: sensor.xiaomi_garage_mode
  action:
    # small delay to make sure that device turned on my changing the speed will become ready to get a new order from this automation and HA has up2date state
    - delay: '00:00:30'
    - service_template: >
        {% if states.sensor.xiaomi_garage_aqi.state | float > states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.garage_xiaomi', 'off') %}
            fan.turn_on
        {% elif states.sensor.xiaomi_garage_aqi.state | float < states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.garage_xiaomi', 'on') %}
            fan.turn_off
        {% else %}
            fan.xiaomi_miio_set_child_lock_on
        {% endif %}
      entity_id: 'fan.garage_xiaomi'
        
- alias: "Bedroom: Air quality"
  trigger:
    - platform: time_pattern
      minutes: "/99"
      # to invoke automation whenever speed was changed as it will always turn Xiaomi on
    - platform: state
      entity_id: sensor.xiaomi_bedroom_mode
  action:
    # small delay to make sure that device turned on my changing the speed will become ready to get a new order from this automation and HA has up2date state
    - delay: '00:00:10'
    - service_template: >
        {% if states.sensor.xiaomi_bedroom_aqi.state | float > states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.bedroom_xiaomi', 'off') %}
            fan.turn_on
        {% elif states.sensor.xiaomi_bedroom_aqi.state | float < states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.bedroom_xiaomi', 'on') %}
            fan.turn_off
        {% else %}
            fan.xiaomi_miio_set_child_lock_on
        {% endif %}
      entity_id: 'fan.bedroom_xiaomi'
        
- alias: "Kidsroom: Air quality"
  trigger:
    - platform: time_pattern
      minutes: "/15"
      # to invoke automation whenever speed was changed as it will always turn Xiaomi on
    - platform: state
      entity_id: sensor.xiaomi_kidsroom_mode
  action:
    # small delay to make sure that device turned on my changing the speed will become ready to get a new order from this automation and HA has up2date state
    - delay: '00:00:30'
    - service_template: >
        {% if states.sensor.xiaomi_kidsroom_aqi.state | float > states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.kidsroom_xiaomi', 'off') %}
            fan.turn_on
        {% elif states.sensor.xiaomi_kidsroom_aqi.state | float < states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.kidsroom_xiaomi', 'on') %}
            fan.turn_off
        {% else %}
            fan.xiaomi_miio_set_child_lock_on
        {% endif %}
      entity_id: 'fan.kidsroom_xiaomi'
      
- alias: "Playroom: Air quality"
  trigger:
    - platform: time_pattern
      minutes: "/15"
      # to invoke automation whenever speed was changed as it will always turn Xiaomi on
    - platform: state
      entity_id: sensor.xiaomi_playroom_mode
  action:
    # small delay to make sure that device turned on my changing the speed will become ready to get a new order from this automation and HA has up2date state
    - delay: '00:00:30'
    - service_template: >
        {% if states.sensor.xiaomi_playroom_aqi.state | float > states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.playroom_xiaomi', 'off') %}
            fan.turn_on
        {% elif states.sensor.xiaomi_playroom_aqi.state | float < states.input_number.max_aqi_for_xiaomi.state | float and is_state('fan.playroom_xiaomi', 'on') %}
            fan.turn_off
        {% else %}
            fan.xiaomi_miio_set_child_lock_on
        {% endif %}
      entity_id: 'fan.playroom_xiaomi'

- alias: "Living Room: Humidity"
  trigger:
    - platform: time_pattern
      minutes: "/15"
      # to invoke automation whenever speed was changed as it will always turn Xiaomi on
    - platform: state
      entity_id: sensor.xiaomi_living_room_humidifier_mode
  action:
    # Before doing any interactions with humidifier check if there is water in it as it will fail otherwise
    - condition: numeric_state
      entity_id: sensor.living_room_humidifier_water_level
      above: 10  
    # small delay to make sure that device turned on my changing the speed will become ready to get a new order from this automation and HA has up2date state
    - delay: '00:00:30'
    - service_template: >
        {% if states.sensor.humidity_158d00027867c3.state | float > states.input_number.max_humidity.state | float and states.fan.living_room_humidifier.state  == 'on' %}
            fan.turn_off
        {% elif states.sensor.humidity_158d00027867c3.state | float < states.input_number.min_humidity.state | float and states.fan.living_room_humidifier.state  == 'off' %}
            fan.turn_on
        {% else %}
            fan.xiaomi_miio_set_child_lock_on
        {% endif %}
      entity_id: fan.living_room_humidifier
        
- alias: "Upstairs: Humidity"
  trigger:
    platform: time_pattern
    minutes: "/1"
  action:
    - condition: or
      conditions:
        - condition: and
          conditions:
            - condition: state
              entity_id: switch.sonoff_1000ac41af
              state: 'off'
            - condition: template
              value_template: "{{ states.sensor.humidity_158d0002b6ca82.state | float < states.input_number.min_humidity.state | float }}"
        - condition: and
          conditions:
            - condition: state
              entity_id: switch.sonoff_1000ac41af
              state: 'on'
            - condition: template
              value_template: "{{ states.sensor.humidity_158d0002b6ca82.state | float > states.input_number.max_humidity.state | float }}"
    - service: switch.toggle
      data:
        entity_id: switch.sonoff_1000ac41af

# wlaczalo sie 14.01 kiedy byla sama niania w domu

- alias: "Calculate if nobody is at home"
  trigger:
    platform: state
    entity_id: device_tracker.google_maps_107747480305280073082, device_tracker.google_maps_102671172042975404481, device_tracker.google_maps_113206223653696792209
  condition:
    condition: or
    conditions:
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.nobody_home
              state: 'on'
            - condition: or
              conditions:
                - condition: state
                  entity_id: 'device_tracker.google_maps_107747480305280073082'
                  state: 'home'
                - condition: state
                  entity_id: 'device_tracker.google_maps_102671172042975404481'
                  state: 'home'
                - condition: state
                  entity_id: 'device_tracker.google_maps_113206223653696792209'
                  state: 'home'
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.nobody_home
              state: 'off'
            - condition: and
              conditions:
                - condition: state
                  entity_id: 'device_tracker.google_maps_107747480305280073082'
                  state: 'not_home'
                - condition: state
                  entity_id: 'device_tracker.google_maps_102671172042975404481'
                  state: 'not_home'
                - condition: state
                  entity_id: 'device_tracker.google_maps_113206223653696792209'
                  state: 'not_home'
  action:
    service: input_boolean.toggle
    data:
        entity_id: input_boolean.nobody_home
        
- alias: "Calculate if everybody asleep"
  trigger:
    platform: time_pattern
    minutes: "/5"
  action:
    - condition: template
      value_template: "{{ (states.sensor.illumination_7c49ebb189e3.state | float < states.input_number.asleep_ilumination_threshold.state | float and states.input_boolean.everyone_asleep.state == 'off') or (states.sensor.illumination_7c49ebb189e3.state | float > states.input_number.asleep_ilumination_threshold.state | float and states.input_boolean.everyone_asleep.state == 'on') }}"
    - service: input_boolean.toggle
      data:
        entity_id: input_boolean.everyone_asleep
    
- alias: "Max clean based on nobody home"
  trigger:
    platform: template
    value_template: "{{ (states.input_boolean.nobody_home.state != states.input_boolean.max_clean.state) }}"
  action:
    service: input_boolean.toggle
    data:
        entity_id: input_boolean.max_clean
        
- alias: "Night clean based on everyone asleep"
  trigger:
    platform: template
    value_template: "{{ (states.input_boolean.everyone_asleep.state != states.input_boolean.night_clean.state) }}"
  action:
    service: input_boolean.toggle
    data:
        entity_id: input_boolean.night_clean
        
# Humidifier has to be separate as it's dependable whether it can be controlled as it requires to have water to change speed without errors
- alias: "Activate and deactivate night cleaning - Humidifier"
  trigger:
    # trigger on night_clean flag change
    - platform: state
      entity_id: input_boolean.night_clean
    # or every 15minutes to check if change needed as humidifier might due to lack of water get out of sync
    - platform: time_pattern
      minutes: "/15"
  action:
    # check if any action has be invoked (needed as there is timing trigger now)
    - condition: template
      value_template: "{{ (states.input_boolean.night_clean.state == 'on' and  states.fan.living_room_humidifier.attributes.speed != 'High') or (states.input_boolean.night_clean.state == 'off' and  states.fan.living_room_humidifier.attributes.speed != 'Silent')}}"
  
    # first set silent mode and then if night cleaning flag is on turn on night cleaning
    # that way one automation covers both turn on and off of night cleaning
      
    # Before doing any interactions with humidifier check if there is water in it as it will fail otherwise
    - condition: numeric_state
      entity_id: sensor.living_room_humidifier_water_level
      above: 10
      
    #Living Room Humidifier
    - service: fan.set_speed
      data:
        entity_id: fan.living_room_humidifier
        speed: silent
        
    - condition: template
      value_template: "{{ states.input_boolean.night_clean.state == 'on' }}"
        
    # Living Room Humidifier
    - service: fan.set_speed
      data:
        entity_id: fan.living_room_humidifier
        speed: high
        
# Xiaomi Air Purifier 2 Garage: auto <-> favorite
# Xiaomi Air Purifier Pro Living Room: silent <-> auto
- alias: "Activate and deactivate night cleaning - All the rest"
  trigger:
    platform: state
    entity_id: input_boolean.night_clean
  action:
    # first set silent mode and then if night cleaning flag is on turn on night cleaning
    # that way one automation covers both turn on and off of night cleaning
  
    # Garage
    - service: fan.set_speed
      data:
        entity_id: fan.garage_xiaomi
        speed: auto
        
    # Living Room
    - service: fan.set_speed
      data:
        entity_id: fan.livingroom_xiaomi
        speed: silent

    - condition: template
      value_template: "{{ states.input_boolean.night_clean.state == 'on' }}"
      
    # Garage
    - service: fan.set_speed
      data:
        entity_id: fan.garage_xiaomi
        speed: favorite
        
    # Living Room
    - service: fan.set_speed
      data:
        entity_id: fan.livingroom_xiaomi
        speed: auto

# TODO: Add timer trigger and check if actions needed as xiaomi humidifier might get out of sync as it won't change speed if has no water
# TODO: Change to similar way to the night mode
- alias: "Turn on max cleaning when max clean flag turned on"
  trigger:
    platform: state
    entity_id: input_boolean.max_clean
    to: 'on'
  action:
    # Living Room
    - service: fan.set_speed
      data:
        entity_id: fan.livingroom_xiaomi
        speed: favorite
        
    # Bedroom
    - service: fan.set_speed
      data:
        entity_id: fan.bedroom_xiaomi
        speed: favorite
        
    # Kidsroom
    - service: fan.set_speed
      data:
        entity_id: fan.kidsroom_xiaomi
        speed: favorite    
    
    # Playroom
    - service: fan.set_speed
      data:
        entity_id: fan.playroom_xiaomi
        speed: favorite
    
    # Garage
    - service: fan.set_speed
      data:
        entity_id: fan.garage_xiaomi
        speed: favorite
        
    # Before doing any interactions with humidifier check if there is water in it as it will fail otherwise
    - condition: numeric_state
      entity_id: sensor.living_room_humidifier_water_level
      above: 10
        
    # Living Room Humidifier
    - service: fan.set_speed
      data:
        entity_id: fan.living_room_humidifier
        speed: high
    
    # invoking many automations here was unrealiable as a solution to set xiaomi device to appropriate state as changing speed always turns it on

# TODO: Add timer trigger and check if actions needed as xiaomi humidifier might get out of sync as it won't change speed if has no water
# TODO: Change to similar way to the night mode
- alias: "Turn off max cleaning when max clean flag turned off"
  trigger:
    platform: state
    entity_id: input_boolean.max_clean
    to: 'off'
  action:
    # Living Room
    - service: fan.set_speed
      data:
        entity_id: fan.livingroom_xiaomi
        speed: silent
    
    # Bedroom
    - service: fan.set_speed
      data:
        entity_id: fan.bedroom_xiaomi
        speed: silent
        
    # Kids Room
    - service: fan.set_speed
      data:
        entity_id: fan.kidsroom_xiaomi
        speed: silent

    #Playroom
    - service: fan.set_speed
      data:
        entity_id: fan.playroom_xiaomi
        speed: silent
        
    # Garage
    - service: fan.set_speed
      data:
        entity_id: fan.garage_xiaomi
        speed: auto
    
    # Before doing any interactions with humidifier check if there is water in it as it will fail otherwise
    - condition: numeric_state
      entity_id: sensor.living_room_humidifier_water_level
      above: 10  
    
    #Living Room Humidifier
    - service: fan.set_speed
      data:
        entity_id: fan.living_room_humidifier
        speed: silent

    # invoking many automations here was unrealiable as a solution to set xiaomi device to appropriate state as changing speed always turns it on

- alias: "Notify when SPA Machinery temp below alert value"
  trigger:
    platform: template
    value_template: "{{ states.sensor.temperature_158d0002b87fdd.state | float < states.input_number.min_alert_spa_machinery_temperature.state | float }}"
  action:
    - condition: template
      value_template: "{{ states.sensor.temperature_158d0002b87fdd.state | float < states.input_number.min_alert_spa_machinery_temperature.state | float }}"
    - service: notify.android_lukasz
      data:
        message: "HA-Zabawa - SPA Machinery Temperature"
        title: "Temperature: {{ states.sensor.temperature_158d0002b87fdd.state }} is below threshold ({{ states.input_number.min_alert_spa_machinery_temperature.state }})" 

- alias: "Notify when Xiaomi Humidifier water level below alert value"
  trigger:
    platform: template
    value_template: "{{ states.sensor.living_room_humidifier_water_level.state | float < states.input_number.alert_humidifier_water_level.state | float }}"
    #workaround is state was often unavailable causing alert - don't know what was the reason of that
    for: "00:01:00"
  action:
    - condition: template
      value_template: "{{ states.sensor.living_room_humidifier_water_level.state | float < states.input_number.alert_humidifier_water_level.state | float }}"
    - service: notify.android_lukasz
      data:
        message: "HA-Zabawa - Xiaomi Humidifier Water Level"
        title: "Xiaomi Humidifier Water Level: {{ states.sensor.living_room_humidifier_water_level.state }} is below threshold ({{ states.input_number.alert_humidifier_water_level.state }})" 
    - condition: template
      value_template: "{{ states.input_boolean.speaking_home.state == 'on' }}"
    - service: tts.google_translate_say
      entity_id: media_player.living_room_display
      data_template:
        message: 'Poziom wody w nawilżaczu w salonie to {{ states.sensor.living_room_humidifier_water_level.state }} procent. Proszę uzupełnić.'
        language: 'pl'
      
      